Import('*')

import sys
import re

exporter_sources = Split('''
    MaxAnimationExport.cpp
    MaxAnimationExportDesc.cpp
    MaxAnimationExportMaxscriptCall.cpp
    MaxInterface.cpp
    MaxMaterial.cpp
    MaxMaterialExport.cpp
    MaxMaterialExportDesc.cpp
    MaxMaterialExportMaxscriptCall.cpp
    MaxMesh.cpp
    MaxMeshExport.cpp
    MaxMeshExportDesc.cpp
    MaxMeshExportMaxscriptCall.cpp
    MaxMorphAnimationExport.cpp
    MaxMorphAnimationExportDesc.cpp
    MaxMorphAnimationExportMaxscriptCall.cpp
    MaxNode.cpp
    MaxNullView.cpp
    MaxSkeletonExport.cpp
    MaxSkeletonExportDesc.cpp
    MaxSkeletonExportMaxscriptCall.cpp
    StdAfx.cpp
    cal3d_max_exporter.cpp
    cal3d_max_exporter.def
''')

exporter_src_sources = Split('''
    BaseInterface.cpp
    BaseMaterial.cpp
    BaseMesh.cpp
    BaseNode.cpp
    BoneCandidate.cpp
    Exporter.cpp
    Lodder.cpp
    MaterialCandidate.cpp
    MaterialLibraryCandidate.cpp
    MeshCandidate.cpp
    MorphAnimationCandidate.cpp
    Quadric.cpp
    SkeletonCandidate.cpp
    SubmeshCandidate.cpp
    VertexCandidate.cpp
''')
exporter_win32_sources = Split('''
    AnimationExportSheet.cpp
    AnimationTimePage.cpp
    BoneAssignmentPage.cpp
    LevelOfDetailPage.cpp
    MaterialExportSheet.cpp
    MaterialMapDialog.cpp
    MaterialMapsPage.cpp
    MaterialSelectionPage.cpp
    MeshExportSheet.cpp
    MorphAnimationExportSheet.cpp
    MorphAnimationTimePage.cpp
    SkeletonExportSheet.cpp
    SkeletonFilePage.cpp
    SkeletonHierarchyPage.cpp
    SpringSystemPage.cpp
''')

if 'exp' not in env.get('MSVS_VERSION', '').lower():
    maxVersion = re.findall("[0-9]+", env['IMVU_BUILDDIR_NAME'])[0]
    if not maxVersion:
      raise Exception("You must target a specific version of 3ds Max")

    exporter_sources = ['plugins/cal3d_max_exporter/' + s for s in exporter_sources]
    exporter_src_sources = ['plugins/src/' + s for s in exporter_src_sources]
    exporter_win32_sources = ['plugins/src/win32/' + s for s in exporter_win32_sources]

    if int(maxVersion) < 2000:
      csInclude = '#/Ext/3dsmax' + maxVersion + '/maxsdk/cssdk/include'
    else:
      csInclude = '#/Ext/3dsmax' + maxVersion + '/maxsdk/include/cs'
    if int(maxVersion) >= 2013:
      useUnicode = True
    else:
      useUnicode = False
      
    exporter_env = env.Clone(tools=['cal3d', 'boost'])
    exporter_env['CCFLAGS'].remove('/Zc:wchar_t-')
    exporter_env.Append(
        CPPPATH=['../plugins/cal3d_max_exporter',
                 '#/Source/cal3d/plugins/src',
                 '#/Source/cal3d/plugins/src/win32',
                 '#/ext/3dsmax' + maxVersion + '/maxsdk/include',
                 csInclude,
                 ],
        CPPDEFINES=['_AFXDLL'],
        CPPFLAGS=['/Zc:wchar_t','/wd4239','/wd4238','/wd4245'],
        LIBPATH=['#/Ext/3dsmax' + maxVersion + '/maxsdk/lib'],
        LIBS=['core',
              'geom',
              'gfx',
              'mesh',
              'maxutil', 
              'maxscrpt', 
              'paramblk2'])
    exporter_env['CPPDEFINES'].remove(('NOMINMAX',))
    if not useUnicode:
      exporter_env['CPPDEFINES'].remove(('UNICODE',))
      exporter_env['CPPDEFINES'].remove(('_UNICODE',))
      exporter_env.Append(
        CPPDEFINES=['_MBCS'])
    else:
      exporter_env.Append(
        CPPDEFINES=['UNICODE','_UNICODE'])
    exporter_env['WARNINGS_AS_ERRORS'] = False

    PCH_OBJ = imvu_enable_pch(exporter_env, 'plugins/src/PCH.cpp', 'PCH.h')

    res = exporter_env.RES('plugins/cal3d_max_exporter/cal3d_max_exporter.rc')
    exporter_env.SharedLibrary(
        '../bin/${IMVU_BUILDDIR_NAME}/cal3d_max_exporter',
        exporter_sources + exporter_src_sources + exporter_win32_sources + [res, PCH_OBJ])
    exporter_env.InstallAs(
        '#/Binaries/${IMVU_BUILDDIR_NAME}/cal3d_max_exporter.dle',
        '../bin/${IMVU_BUILDDIR_NAME}/cal3d_max_exporter.dll')
